xx <- as.list(x[mapped_genes])
if(length(xx) > 0) {
# Try the first one
got <- xx[[1]]
got[[1]][["GOID"]]
got[[1]][["Ontology"]]
got[[1]][["Evidence"]]
}
xx <- as.list(org.Sc.sgdGO2ORF)
if(length(xx) > 0){
# Gets the ORF ids for the top 2nd and 3nd GO identifiers
goids <- xx[2:3]
# Gets the ORF ids for the first element of goids
goids[[1]]
# Evidence code for the mappings
names(goids[[1]])
}
x <- org.Sc.sgdGO
> mapped_genes <- mappedkeys(x)
> xx <- as.list(x[mapped_genes])
x <- org.Sc.sgdGO
# Get the ORF identifiers that are mapped to a GO ID
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
got <- xx[[1]]
got
got[[1]][["GOID"]]
got[[1]][["Ontology"]]
got[[1]][["Evidence"]]
got[[2]][["GOID"]]
got[[3]][["GOID"]]
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = YEASTGO, evidence = "TAS");
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = org.Sc.sgd.db, evidence = "TAS");
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = org.Sc.sgd, evidence = "TAS");
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = org.Sc.sgd, evidence = "TAS");
ls(org.Sc.sgd())
ls(org.Sc.sgdGO)
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = org.Sc.sgdGO, evidence = "TAS");
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = YEASTGO, evidence = "TAS");
Yeast.specific.TAS[1:5];
ls("package:org.Sc.sgd.db")
data()
library("hcgene", lib.loc="~/R/win-library/3.2")
library("org.Sc.sgd.db", lib.loc="~/R/win-library/3.2")
library("YEAST", lib.loc="~/R/win-library/3.2")
install.packages("C:/Users/shou/Desktop/org.Sc.sgd.db_3.3.0.tar.gz", repos = NULL, type = "source")
library("AnnotationDbi", lib.loc="~/R/win-library/3.2")
detach("package:AnnotationDbi", unload=TRUE)
library("AnnotationDbi", lib.loc="~/R/win-library/3.2")
library("org.Sc.sgd.db", lib.loc="~/R/win-library/3.2")
detach("package:AnnotationDbi", unload=TRUE)
library("AnnotationDbi", lib.loc="~/R/win-library/3.2")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(c("GO.db"))
biocLite(c("GOstats"))
biocLite(c("Rgraphviz"))
install.packages("I:/hcgene_1.0.1.tar.gz", repos = NULL, type = "source")
library("hcgene", lib.loc="C:/Program Files/R/R-3.3.0/library")
data()
install.packages("C:/Users/shou/Desktop/org.Sc.sgd.db_3.3.0.tar.gz", repos = NULL, type = "source")
library("org.Sc.sgd.db", lib.loc="C:/Program Files/R/R-3.3.0/library")
library("hcgene", lib.loc="~/R/win-library/3.2")
ls("package:GO.db")
library("org.Sc.sgd.db", lib.loc="~/R/win-library/3.2")
library("YEAST", lib.loc="~/R/win-library/3.2")
library("yeastCC", lib.loc="~/R/win-library/3.2")
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = YEASTGO, evidence = "TAS");
Yeast.specific.TAS[1:5];
x <- org.Sc.sgdGO
mapped_genes <- mappedkeys(x)
xx <- as.list(x[mapped_genes])
xx[1]
xx[1][1]
xx[[1]]
xx[[2]]
xx[[1]][1]
xx[[1]][3]
xx[[1]][3][1]
Yeast.specific.TAS[2]
Yeast.specific.TAS[2][1]
Yeast.specific.TAS[[2]]
Yeast.specific.TAS[[2]][1]
Yeast.specific.TAS[[1]][1]
Yeast.specific.TAS[[2]][2]
library("org.Sc.sgd.db", lib.loc="~/R/win-library/3.2")
x <- org.Sc.sgdGO
# Get the ORF identifiers that are mapped to a GO ID
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
b=x[mapped_genes]
names(xx)
xx$AWA1
names(xx$AWA1)
xx$AWA1$`GO:0007155`
xx$AWA1[1]
xx$AWA1[[1]]
xx$AWA1[[1]][1]
xx
xx[1]
l<-list(first=1,second=2,third=list(al=3,beta=4))
l[1]
l[[1]
]
l$first
l$third
l$third[[1]]
l[[3]][[1]]
l[[3]][[2]]
j<-list(name="Joe",salary=5500,union=T)
j[1:3]
j[[3]]
j[[name]]
j[["salary"]]
j[["name"]]
j$name
j$salary
sapply(j,function(x) x[[1]])
ma=sapply(j,function(x) x[[1]])
ma[3]
ma=lapply(j,function(x) x[[1]])
ma[1]
ma[[1]
]
ma$salary
library("org.Sc.sgd.db", lib.loc="~/R/win-library/3.2")
library("plyr", lib.loc="~/R/win-library/3.2")
library("plyr")
id <- rep(letters[1:3],4)
year <- seq(2001,2012)
df <- data.frame(id,year)
df <- arrange(df,id,year)
mylist <-list(a=11, b=12, c=10, d=15)
mydict= unlist(mylist)
df['weight'] = mydict[df[,'id']]
df
which(c(2,3,5,1,4,1) %in% 1)
which(ma %in% 5500)
library("hcgene", lib.loc="~/R/win-library/3.2")
select(annotation(yeast))
library("hcgene", lib.loc="~/R/win-library/3.2")
library("org.Sc.sgd.db", lib.loc="~/R/win-library/3.2")
x <- org.Sc.sgdGO
# Get the ORF identifiers that are mapped to a GO ID
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])
xx[[1]]
list.size(xx)
size(xx)
size()
length(xx)
length(xx[[1]])
xx[[1]][[1]]
xx[[1]][[2]]
xx[[1]][["GOID"]]
xx[[1]][[1]][["GOID"]]
xx[[1]][[1]][[1]]
mapped_genes[1]
which(mapped_genes="AWA1")
which(mapped_genes=AWA1)
which(mapped_genes)
which(mapped_genes==AWA1)
which(mapped_genes=="AWA1")
a=x[mapped_genes]
a[1]
a[100]
a[100][1]
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = YEASTGO, evidence = "TAS");
library("YEAST", lib.loc="~/R/win-library/3.2")
Yeast.specific.TAS <- Get.GO.specific.classes(ontology = "BP", gene2GO = YEASTGO, evidence = "TAS");
Yeast.specific.TAS[1:5];
xx[1:3]
lapply(xx,xx[[1]])
lapply(xx,xx[[index]])
lapply(xx,funxtion(xx) xx[[1]])
lapply(xx,function(xx) xx[[1]])
result0=lapply(xx,function(xx) xx[[1]])
fruit=c("apple","banana","pear")
x_1=as.character(xx[[1]])
x_1[1]
x_2=as.character(xx[[1]][[1]])
x_2[1]
list(mapped_genes[1]=x_2[1])
list(a=x_2[1])
list("mapped_genes[1]"=x_2[1])
list('mapped_genes[1]'=x_2[1])
list(mapped_genes=x_2[1])
list(x_2[1])
a_list=list(x_2[1])
names(a_list)<-mapped_genes[1]
Yeast.general.TAS <- Get.GO.all.classes(a_list);
Table.classes.TAS <- Build.GO.class.labels(Yeast.general.TAS);
cat("Dimension of the multilabel table : ",dim(Table.classes.TAS), "\n");
a_list=c(a_list,x_2[2])
a_list
names(a_list)<-mapped_genes[2]
names(a_list)<-c(mapped_genes[1],mapped_genes[2])
names(a_list)<-c(mapped_genes)
library("hcgene", lib.loc="~/R/win-library/3.2")
install.packages("Matrix")
library("hcgene", lib.loc="~/R/win-library/3.2")
library("yeastCC", lib.loc="C:/Program Files/R/R-3.3.0/library")
data()
library("hcgene", lib.loc="~/R/win-library/3.2")
library("org.Sc.sgd.db", lib.loc="~/R/win-library/3.2")
library("yeastCC", lib.loc="~/R/win-library/3.2")
data(yeastCC)
dim(exprs(yeastCC))
dim(exprs(spYCCES))
yeastCC
exprs?
.
?exprs
data.cc=exprs(yeastCC)
head(data.cc[[1]])
head(data.cc[1])
head(data.cc)
tail(data.cc)
library("yeastCC", lib.loc="~/R/win-library/3.2")
data("yeastCC")
expr.data=exprs(yeastCC)
dim(expr.data)
expr.data[1,1:5]
expr.data[1,]
head(rownames(expr.data))
head(colnames(expr.data))
library("yeast2.db", lib.loc="~/R/win-library/3.2")
x <- yeast2GO
# Get the probe identifiers that are mapped to a GO ID
mapped_probes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_probes])
head(xx[1])
head(xx[[1]][[1]])
getwd()
library(RBGL)
con <- file(system.file("XML/conn2.gxl",package="RBGL"), open="r")
dd <- fromGXL(con)
close(con)
edgeWeights(dd)
dd@edgeL
dd@nodes
dd@edgeData
dd@edgeData[[1]]
dd@graphData
dd@renderInfo
dd@renderInfo@edges
dd@renderInfo@edges[[1]]
dd@edgeData@data
dd@edgeData@data[1]
dd@edgeData@defaults
dd@edgeL.weight
dd@weight
dd@edgeL
dd@edgeL[1]
dd@edgeL[1]$A
class(dd@edgeL$A)
dd@edgeL[1]$A=list(edges=c(2,3,4),weights=c(2,2,2))
edgeWeights(dd)
cc=graphNEL(dd@nodes, dd@edgeL, dd@edgemode)
cc=graphNEL(dd@nodes, dd@edgeL)
nodes=dd@nodes
edgeL=dd@edgeL
edge.mode=dd@graphData
cc=graphNEL(dd@nodes, dd@edgeL, edgemode = "directed")
edgeWeights(cc)
install.packages("dagR")
install.packages("FSelector")
library("FSelector", lib.loc="~/R/win-library/3.2")
data(iris)
iris
class(iris)
weights <- information.gain(Species~., iris)
print(weights)
weights <- gain.ratio(Species~., iris)ratio.
ratio.weights <- gain.ratio(Species~., iris)
print(weights)
subset <- cutoff.k(weights, 2)
f <- as.simple.formula(subset, "Species")
print(f)
new.iris=iris[1:100,]
new.weights <- information.gain(Species~., new.iris)
new.weights
weights <- gain.ratio(Species~Sepal.Length, iris)ratio.
View(weights)
as.simple.formula(subset, "Species")
Species.~
,
subset <- cfs(Species~., iris)
f <- as.simple.formula(subset, "Species")
weights <- information.gain(Species~., iris)
print(weights)
subset <- cutoff.k(weights, 1)
f <- as.simple.formula(subset, "Species")
print(f)
subset <- cutoff.k.percent(weights, 0.75)
f <- as.simple.formula(subset, "Species")
print(f)
subset <- cutoff.biggest.diff(weights)
f <- as.simple.formula(subset, "Species")
print(f)
subset <- cutoff.k.percent(weights, 0.75)
f <- as.simple.formula(subset, "Species")
print(f)
weights <- gain.ratio(Species~., iris)
print(weights)
weights <- gain.ratio(Species~., iris)
print(weights)
ratio.weights <- gain.ratio(Species~., iris)
ratio.weights
new.iris=iris[1:100,1:4]
class.lable=c[rep(1,50),rep(-1,50)]
class.lable=c(rep(1,50),rep(-1,50)）
class.lable=c(rep(1,50),rep(-1,50))
new.data=c(new.iris,class.lable)
new.data=data.frame(new.iris,Species=class.lable)
weights <- gain.ratio(Species~., new.data)
weights
sum(weights)
class(weights)
weights/sum(weights)
cutoff.k.percent(weights, 0.67)
cutoff.k.percent(weights, 0.66)
cutoff.k.percent(weights, 0.4)
cutoff.k.percent(weights, 0.2)
cutoff.k.percent(weights, 0)
cutoff.k.percent(weights, 0.33)
cutoff.k.percent(weights, 0.34)
cutoff.k.percent(weights, 0.35)
cutoff.k.percent(weights, 0.36)
cutoff.k.percent(weights, 0.37)
cutoff.k.percent(weights, 0.38)
age=c(1,1,2,3,3,3,2,11,3,1,2,2,3)
age=c(1,1,2,3,3,3,2,1,1,3,1,2,2,3)
income=c(1,1,1,2,3,3,3,2,3,2,2,2,1,2)
student=c(0,0,0,0,1,1,1,0,1,1,1,0,1,0)
credit_rating=c(0,1,0,0,0,1,1,0,0,0,1,1,0,1)
buys_computer=c(0,0,1,1,1,0,1,0,1,1,1,1,1,0)
d.data=data.frame(age=age,income=income,student=student,credit_rating=credit_rating,buys_computer=buys_computer)
d.weights <- information.gain(buys_computer~., d.data)
d.weights
gain.ratio(buys_computer~., d.data)
gain.ratio(age~., d.data)
gain.ratio(income~., d.data)
information.gain(age~., d.data)
d.data.1=data.frame(age=age,student=student,credit_rating=credit_rating,buys_computer=buys_computer)
information.gain(buys_computer~., d.data.1)
information.gain(age., d.data.1)
information.gain(age, d.data.1)
information.gain(age~., d.data.1)
information.gain(buys_computer~., d.data.1)
buys_computer=c(2,2,1,1,1,2,1,2,1,1,1,1,1,2)
credit_rating=c(2,1,2,2,2,1,1,2,2,2,1,1,2,1)
student=c(2,2,2,2,1,1,1,2,1,1,1,2,1,2)
d.data=data.frame(age=age,income=income,student=student,credit_rating=credit_rating,buys_computer=buys_computer)
information.gain(buys_computer~., d.data)
buys_computer=factor(c(2,2,1,1,1,2,1,2,1,1,1,1,1,2),levels = 1:2)
credit_rating=factor(c(2,1,2,2,2,1,1,2,2,2,1,1,2,1),levels = 1:2)
student=factor(c(2,2,2,2,1,1,1,2,1,1,1,2,1,2),levels = 1:2)
d.data=data.frame(age=age,income=income,student=student,credit_rating=credit_rating,buys_computer=buys_computer)
information.gain(buys_computer~., d.data)
income=factor(c(1,1,1,2,3,3,3,2,3,2,2,2,1,2),levels = 1:)
income=factor(c(1,1,1,2,3,3,3,2,3,2,2,2,1,2),levels = 1:3)
d.data=data.frame(age=age,income=income,student=student,credit_rating=credit_rating,buys_computer=buys_computer)
information.gain(buys_computer~., d.data)
age=factor(c(1,1,2,3,3,3,2,1,1,3,1,2,2,3),levels=1:3)
d.data=data.frame(age=age,income=income,student=student,credit_rating=credit_rating,buys_computer=buys_computer)
information.gain(buys_computer~., d.data)
gain.ratio(buys_computer~., d.data)
sunny=factor(c(1,1,1,1,1,2,2,2,2,3,3,3,3,3),levels = 1:3)
temp=factor(c(1,1,1,1,2,2,2,2,3,3,3,3,3,3),levels = 1:3)
humid=factor(c(1,1,1,1,1,1,2,2,2,2,2,2,2,1),levels = 1:2)
windy=factor(c(1,1,1,1,1,1,2,2,2,2,2,2,2,2),levels = 1:2)
play=factor(c(1,1,2,2,2,1,1,1,1,1,1,1,2,2),levels = 1:2)
paly.data=data.frame(sunny=sunny,temperature=temp,humidity=humid,windy=windy,play=play)
information.gain(play~., paly.data)
gain.ratio(play~., paly.data)
log10(8/14)*8/14
-log10(8/14)*8/14-log10(6/14)*6/14
0.2965382+0.940286
1.236824-8*0.8112781/14-6/14
-9*log(9/14)/14-5*log(5/14)/14
-9*log2(9/14)/14-5*log2(5/14)/14
-log2(8/14)*8/14-log2(6/14)*6/14
0.03335912/0.04884862
-0.8112781*8/14-6/14
0.8921589+0.03335912-0.6829081
-9*log2(9/14)/14
temp=factor(c(1,1,2,3,2,1,3,2,1,2,3,3,2,2),levels = 1:3)
humid=factor(c(1,1,1,2,2,1,2,1,2,1,2,2,2,1),levels = 1:2)
windy=factor(c(1,2,1,1,2,1,2,2,1,1,1,2,1,2),levels = 1:2)
play=factor(c(1,1,1,2,2,2,2,2,2,2,2,1,2,1),levels = 1:2)
paly.data=data.frame(sunny=sunny,temperature=temp,humidity=humid,windy=windy,play=play)
information.gain(play~., paly.data)
log2(9/14)+log2(5/14)
data("iris")
gain.ratio(play~., paly.data)
library("RWeka", lib.loc="~/R/win-library/3.2")
library("RWekajars", lib.loc="~/R/win-library/3.2")
InfoGainAttributeEval(play~., play.data)
InfoGainAttributeEval(play~., paly.data)
InfoGainAttributeEval(Species ~ . , data = iris)
weights <- information.gain(Species~., iris)
print(weights)
GainRatioAttributeEval(Species~., paly.data)
GainRatioAttributeEval(play~., paly.data)
setwd("H://R//DATA")#设置工作路径
source("headfile.R")
annotation.final.BP=AnnotationFinal("BP")#提取BP结构下的所有基因及注释信息
go.general.list.BP=Get.GO.all.classes(annotation.final.BP)#根据基因的注释GO标签得到基因的全部GO标签
go.general.table.BP=Build.GO.class.labels(go.general.list.BP)#生成基因及注释信息数据表
matrix.cellcycle=ReadData("cellcycle0.train")#读入基因特征属性
matrix.cellcycle.data=matrix.cellcycle[[1]]#基因的数据信息
training.cellcycle.data=matrix.cellcycle.data
training.cellcycle.name=rownames(training.cellcycle.data)#基因名称列表
#得到几个数据集共有的基因的名称列表
common.genes <- Get.all.common.genes(go.general.table.BP, training.cellcycle.data)
#得到common genes中每个基因对应的全部GO标签列表
match.go.general=go.general.list.BP[common.genes]
#将标签列表转换为TABLE形式，行名称为基因名称，列名称为GO标签
match.go.table=Build.GO.class.labels(match.go.general)
#得到目前的所有基因共有多少个不重复的GO标签
all.go.lables=Get.classes(match.go.general)
BP.univ.graph <- Build.universal.graph.ontology.down(ontology = "BP")#得到BP全图
#得到DAG图中包含50个样本以上的节点列表及对应的基因名称
go.lable.list=DataCleaning(match.go.general,match.go.table)
all.go.lables.50=Get.classes(go.lable.list)
except.root.lables=setdiff(all.go.lables.50,"GO:0008150")#除去根结点后所剩节点
#得到DAG选择节点后各基因所包含的底层节点
#go.each.gene=Setfinalannotation(univ.graph = BP.univ.graph,go.lable.list = go.lable.list)
#得到修改后的DAG图中各节点的层级
graph.BP.general.50 <- subGraph(all.go.lables.50, BP.univ.graph)
graph.BP.level.50=GraphLevel(graph.BP.general.50)
go.level.statistics=LevelStatistics(graph.BP.level.50)
go.for.each.level=go.level.statistics[[1]]
each.level.nodes.num=go.level.statistics[[2]]
select.node.3=NodeSelectByLevel(go.level.statistics,3,add.root.node = TRUE)#选择根结点至第三层的所有go节点
except.root.lables.3=setdiff(select.node.3,"GO:0008150")
graph.select.node.3 <- subGraph(select.node.3, BP.univ.graph)
PlotLableGraph(except.root.lables.3,BP.univ.graph,num.only=TRUE,plot.en = TRUE,output.en = TRUE,write.pic.name = "go.graph.level.ps")
#go.leaf.nodes.3=GetLeafNode(graph.select.node.3)
go.leaf.nodes.3=GetLeafNode1(graph.select.node.3)
for (i in 1:length(go.lable.list))
{
go.lable.list[[i]]=intersect(go.lable.list[[i]],except.root.lables.3)
}
except.root.table.3=Build.GO.class.labels(go.lable.list)
# data.cellcycle.total.1=EachnodeDataset(except.root.table.3,except.root.lables.3,training.cellcycle.data,common.genes = common.genes,write.en=TRUE)
#
# BuildValidset("cellcycle0.valid",except.root.lables.3,"validdataset.csv","validclass.csv")
# BuildValidset("cellcycle0.propertest",except.root.lables.3,"testdataset.csv","testclass.csv")
probability.data=readMat("decision.mat",fixNames = FALSE)
prob.for.genes=probability.data$decision
downtop.prob=prob.for.genes
topdown.prob=prob.for.genes
go.for.level.3=go.for.each.level[1:3]
nodes.to.index=list()
for(i in 1:length(except.root.lables.3))
{
nodes.to.index[i]=i
}
names(nodes.to.index)=except.root.lables.3
no.root.nodes.num=length(except.root.lables.3)
names(except.root.lables.3)=c(1:no.root.nodes.num)
nodes.to.children=list()
for(i in 1:length(except.root.lables.3))
{
inter.ids=AnnotationDbi::get(except.root.lables.3[[i]], GOBPCHILDREN)
child.ids=intersect(except.root.lables.3,inter.ids)
if(length(child.ids)>0)
{
inter.child.vec=vector()
for(j in 1:length(child.ids))
{
inter.child.vec=c(inter.child.vec,nodes.to.index[[child.ids[j]]])
}
nodes.to.children[[i]]=inter.child.vec
}
else
{
nodes.to.children[[i]]=NA
}
}
names(nodes.to.children)=except.root.lables.3
source("make_index.R")
total.index=MakeIndex(except.root.lables)
head(total.index[[2]])
total.index=MakeIndex(except.root.lables.3)
nodes.to.index.1=total.index[[1]]
nodes.to.children.1=total.index[[2]]
remove(nodes\)
remove(nodes.to.children)
remove(nodes.to.index)
remove(total.index)
total.index=MakeIndex(except.root.lables.3)
nodes.to.index=total.index[[1]]
nodes.to.children=total.index[[2]]
downtop.prob=DownTopStep(go.for.level.3,go.leaf.nodes.3,nodes.to.index,nodes.to.children,prob.for.genes)
topdown.prob=TopDownStep(go.for.level.3,go.leaf.nodes.3,nodes.to.index,nodes.to.children,downtop.prob)
for (i in seq(1,6,2))
{
print(i)
}
source("H:\R\DATA\library\make_index.R")
source("H\R\DATA\library\make_index.R")
source("H://R//DATA//library//make_index.R")
source("make_index.R")
setwd("H://R//DATA//library")
source("annotation_extract.R")
