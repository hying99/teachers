go.level.statistics=LevelStatistics(graph.BP.level.50)
go.for.each.level=go.level.statistics[[1]]
each.level.nodes.num=go.level.statistics[[2]]
total.levels=length(go.for.each.level)
select.node.3=NodeSelectByLevel(go.level.statistics,total.levels,add.root.node = TRUE)#选择根结点至第三层的所有go节点
except.root.labels.3=setdiff(select.node.3,"GO:0008150")
graph.select.node.3 <- subGraph(select.node.3, BP.univ.graph)
PlotLabelGraph(except.root.labels.3,BP.univ.graph,num.only=FALSE,plot.en = TRUE,output.en = FALSE,write.pic.name = "go.graph.level.ps")
each.go.level.num=graph.BP.level.50[except.root.labels.3]
each.go.weight=unname(each.go.level.num)
for (i in 1:length(each.go.level.num))
{
each.go.weight[i]=(total.levels+1-each.go.weight[i])/(total.levels+1)
}
#go.leaf.nodes.3=GetLeafNode1(graph.select.node.3)
for (i in 1:length(go.label.list))
{
go.label.list[[i]]=intersect(go.label.list[[i]],select.node.3)
}
root.table.3=Build.GO.class.labels(go.label.list)
setwd("H://R//DATA//traindata")
select.attributes.en=FALSE
data.total=BuildTrainDataset(root.table.3, except.root.labels.3, data.matrix=remain.data,
ontology = "BP", adjust.ratio=0.2,ratio.negative = 0, common.genes = common.genes,
seed = 1,select.attributes.en=select.attributes.en,write.en=TRUE)
setwd("H://R//DATA")
original.valid.file=paste("originaldata//",file.prefix,"0.valid",sep = "")
select.attributes.en=FALSE
if(select.attributes.en==FALSE)
{
write.data.fname=paste(file.prefix,"0_validdataset.csv",sep = "")
write.class.fname=paste(file.prefix,"0_validclass.csv",sep = "")
valid.cellcycle=ReadData(original.valid.file,factor.col = factor.col)#读入valid基因特征属性
valid.cellcycle.data=valid.cellcycle[[1]]#valid基因的数据信息
valid.scaled.data=ValiddataScale(valid.cellcycle.data,factor.col,sp,replace.outlier=FALSE,NAreplace=TRUE,Zrescale=TRUE)
valid.data.total=BuildValidset(valid.scaled.data,go.general.table.BP,go.general.list.BP,except.root.labels.3,
write.data.enable=TRUE,write.class.enable=TRUE,write.data.fname=write.data.fname,
write.class.fname=write.class.fname,select.attributes.en=select.attributes.en,select.attributes)
valid.select.data=valid.data.total[[1]]
valid.select.table=valid.data.total[[2]]
}
#original.test.file="originaldata//cellcycle0.propertest"
original.test.file=paste("originaldata//",file.prefix,"0.propertest",sep = "")
select.attributes.en=FALSE
if(select.attributes.en==FALSE)
{
write.data.fname=paste(file.prefix,"0_testdataset.csv",sep = "")
write.class.fname=paste(file.prefix,"0_testclass.csv",sep = "")
test.cellcycle=ReadData(original.test.file,factor.col = factor.col)#读入test基因特征属性
test.cellcycle.data=test.cellcycle[[1]]#test基因的数据信息
test.scaled.data=ValiddataScale(test.cellcycle.data,factor.col,sp,replace.outlier=FALSE,NAreplace=TRUE,Zrescale=TRUE)
test.data.total=BuildValidset(test.scaled.data,go.general.table.BP,go.general.list.BP,except.root.labels.3,
write.data.enable=TRUE,write.class.enable=TRUE,write.data.fname=write.data.fname,
write.class.fname=write.class.fname,select.attributes.en=select.attributes.en,select.attributes)
test.select.data=test.data.total[[1]]
test.select.table=test.data.total[[2]]
}
library.path=paste(work.path,"//library",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
setwd(library.path)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("prauc_calculate.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detect.R")
source("data_process.R")
setwd(work.path)
source("Get_matrixdata_from_siblings.R")
getwd()
library.path=paste(work.path,"//library",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
setwd(library.path)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("prauc_calculate.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detect.R")
source("data_process.R")
setwd(work.path)
source("Get_matrixdata_from_siblings.R")
library.path=paste(work.path,"//library_old",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
setwd(library.path)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("prauc_calculate.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detect.R")
source("data_process.R")
setwd(work.path)
source("Get_matrixdata_from_siblings.R")
getwd
getwd
getwd()
library.path=paste(work.path,"//library_old",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
setwd(library.path)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("prauc_calculate.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detect.R")
source("data_process.R")
setwd(work.path)
source("Get_matrixdata_from_siblings.R")
library.path=paste(work.path,"//library",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
#用于重新生成训练集 验证集 测试集 20170329
#加入了数据集选择函数，修改factor.col为factor.col.index
work.path="H://R//CODES"
data.path="H://R//DATA"
setwd(work.path)#设置工作路径
#引入库函数以及自定义的函数
source("headfile.R")
BP.univ.graph <- Build.universal.graph.ontology.down(ontology = "BP")#得到BP全图
annotation.final.BP=AnnotationFinal("BP")#提取BP结构下的所有基因及注释信息
go.general.list.BP=Get.GO.all.classes(annotation.final.BP)#根据基因的注释GO标签得到基因的全部GO标签
go.general.table.BP=Build.GO.class.labels(go.general.list.BP)#生成基因及注释信息数据表
file.savepath="H://R//DATA//rebuilddata"
write.data.enable=TRUE
row.names.enable=TRUE
#首先选择使用的数据集，1 cellcycle 2 derisi 3 eisen 4 gasch1 5 gasch2 6 church 7 spo 8 seq 9 struc 10 hom
dataset.result=DatasetSelect(dataset.index = 1)
file.prefix=dataset.result[[1]]#得到数据集前缀名称
factor.col.index=dataset.result[[2]]#得到内容为类别信息的列号
factor.col.num=dataset.result[[3]]#得到factor列转化为数值后各列的总数
factor.levels=dataset.result[[4]]
DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
# #生成eisen数据集
# file.prefix="eisen"
# factor.col=c(0)
# DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
# #生成cellcycle数据集
# file.prefix="cellcycle"
# factor.col=c(0)
# DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
# #生成gasch2数据集
# file.prefix="gasch2"
# factor.col=c(0)
# DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
#
work.path="H://R//CODES"
data.path="H://R//DATA"
setwd(work.path)#设置工作路径
getwd()
setwd(H://R//CODES)
#用于重新生成训练集 验证集 测试集 20170329
#加入了数据集选择函数，修改factor.col为factor.col.index
work.path="F://R//CODES"
data.path="F://R//DATA"
setwd(work.path)#设置工作路径
#引入库函数以及自定义的函数
source("headfile.R")
BP.univ.graph <- Build.universal.graph.ontology.down(ontology = "BP")#得到BP全图
annotation.final.BP=AnnotationFinal("BP")#提取BP结构下的所有基因及注释信息
go.general.list.BP=Get.GO.all.classes(annotation.final.BP)#根据基因的注释GO标签得到基因的全部GO标签
go.general.table.BP=Build.GO.class.labels(go.general.list.BP)#生成基因及注释信息数据表
file.savepath="F://R//DATA//rebuilddata"
write.data.enable=TRUE
row.names.enable=TRUE
#首先选择使用的数据集，1 cellcycle 2 derisi 3 eisen 4 gasch1 5 gasch2 6 church 7 spo 8 seq 9 struc 10 hom
dataset.result=DatasetSelect(dataset.index = 1)
file.prefix=dataset.result[[1]]#得到数据集前缀名称
factor.col.index=dataset.result[[2]]#得到内容为类别信息的列号
factor.col.num=dataset.result[[3]]#得到factor列转化为数值后各列的总数
factor.levels=dataset.result[[4]]
DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
# #生成eisen数据集
# file.prefix="eisen"
# factor.col=c(0)
# DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
# #生成cellcycle数据集
# file.prefix="cellcycle"
# factor.col=c(0)
# DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
# #生成gasch2数据集
# file.prefix="gasch2"
# factor.col=c(0)
# DatasetRebuild(file.prefix=file.prefix,factor.col.index = factor.col.index,factor.levels = factor.levels,data.path,file.savepath, write.data.enable,row.names.enable)
#
library.path=paste(work.path,"//library",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
setwd(library.path)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("prauc_calculate.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detect.R")
source("data_process.R")
setwd(work.path)
source("Get_matrixdata_from_siblings.R")
library.path=paste(work.path,"//library",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
setwd(library.path)
source("annotation_extract.R")
source("annotation_match.R")
source("annotation_final.R")
source("read_data.R")
source("plotfigure.R")
source("write_annotation.R")
source("graph_level.R")
source("data_cleaning.R")
source("set_final_annotation.R")
source("get_leafnode.R")
source("get_leafnode_1.R")
source("divide_dataset.R")
source("original_dataset.R")
source("eachnode_dataset.R")
source("build_train_dataset.R")
source("build_matlab_dataset.R")
source("get_matrixdata_change.R")
source("build_validset.R")
source("level_statistics.R")
source("node_select_by_level.R")
source("plot_label_graph.R")
source("downtop_parent.R")
source("downtop_weighted.R")
source("downtop_step.R")
source("topdown_step.R")
source("make_index.R")
source("mh_evaluate.R")
source("precision_recall_calculate.R")
source("smote_samples.R")
source("add_neg_samples.R")
source("select_attributes.R")
source("prauc_calculate.R")
source("write_arff.R")
source("validdata_scale.R")
source("traindata_scale.R")
source("violate_detectlabel.R")
source("violate_detectprob.R")
source("data_process.R")
setwd(work.path)
source("Get_matrixdata_from_siblings.R")
BiocManager::available()
BiocManager::install()
library.path=paste(work.path,"//library",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
if (!requireNamespace("BiocManager", quietly = TRUE))     install.packages("BiocManager") BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))     install.packages("BiocManager") BiocManager::install(version = "3.12")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
library(BiocManager)
library.path=paste(work.path,"//library",sep = "")
library(org.Sc.sgd.db)
library(hcgene)
library(RBGL)
#library(YEAST)
library(yeastCC)
library(RWeka)
library(R.matlab)
library(FSelector)
library(PerfMeas)
library(ROSE)
library(DMwR)
library(marray)
library(scales)
library(HCGene)
install.packages(hcgene)
install.packages('hcgene', dependencies=TRUE, repos='http://cran.rstudio.com/')
